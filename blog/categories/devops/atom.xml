<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Devops | Hank Beaver]]></title>
  <link href="http://blasterpal.github.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://blasterpal.github.com/"/>
  <updated>2013-02-22T20:47:53-05:00</updated>
  <id>http://blasterpal.github.com/</id>
  <author>
    <name><![CDATA[Hank Beaver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef Learnings 1.1]]></title>
    <link href="http://blasterpal.github.com/blog/2011/01/26/chef-learnings-1-1/"/>
    <updated>2011-01-26T04:14:56-05:00</updated>
    <id>http://blasterpal.github.com/blog/2011/01/26/chef-learnings-1-1</id>
    <content type="html"><![CDATA[<p>Today's topic, <a href="http://wiki.opscode.com/display/chef/Libraries">Libraries</a> and including them in multiple Cookbooks. Any custom library loaded into a single Cookbook is available to all Cookbooks within your Node. So for example, let's say you have a custom function that operates on Data Bags (like I do), it is available to all recipes. For example, if you include in a library one of your base/default cookbooks (like IPTables), then any other recipe can access those methods. The trick is that in your first recipe where you include your custom library, you have monkey patched Chef to include it thereafter:</p>

<pre><code>class Chef::Recipe
  include DataBagHelper
end
</code></pre>

<p>So nice, now I have my custom library available everywhere. This makes me think, why not just have a custom library cookbook, or make my custom libraries part of my base/default recipe included in ALL nodes? So now I have my own methods and functionality available everywhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Learnings 1.0]]></title>
    <link href="http://blasterpal.github.com/blog/2010/12/01/chef-learnings-1-0/"/>
    <updated>2010-12-01T10:31:48-05:00</updated>
    <id>http://blasterpal.github.com/blog/2010/12/01/chef-learnings-1-0</id>
    <content type="html"><![CDATA[<p>Sitting with Seth from <a href="http://www.opscode.com">Opscode</a> today drinking some coffee. He pointed out a couple of things, I'd like to share.</p>

<ol>
<li><p>Learn how to use <a href="http://wiki.opscode.com/display/chef/Shef">Shef</a>, to inspect node. It replaces 'debug' statements when doing runs in templates or recipes.</p>

<p> 'shef -z'</p></li>
<li><p>If using <a href="http://wiki.opscode.com/display/chef/Knife">Kinfe</a> and a node is acting funny, inspect it via show or edit. For example, you might have to manually edit a run list or a default set of attributes that are an array instead of a hash (both real examples).</p></li>
<li>Stop using symbols for hash keys in recipes, cookbooks, etc. The Opscode default will be a double quoted string and older versions can just not work.</li>
<li>Upgrade to latest chef when overrides are not behaving as desired correctly OR override all the attributes for a recipe (even one's you don't want to override) if you are &lt; 0.9.10. However, the latter solution is obviously less desirable.</li>
</ol>


<p>That's all for now.</p>
]]></content>
  </entry>
  
</feed>
