<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ops | Hank Beaver. Web Architect.]]></title>
  <link href="http://www.hankbeaver.com/blog/categories/ops/atom.xml" rel="self"/>
  <link href="http://www.hankbeaver.com/"/>
  <updated>2014-03-19T01:25:12-04:00</updated>
  <id>http://www.hankbeaver.com/</id>
  <author>
    <name><![CDATA[Hank Beaver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Ops folk need to learn to become DevOps]]></title>
    <link href="http://www.hankbeaver.com/blog/2013/07/03/what-ops-folk-need-to-learn-to-become-devops/"/>
    <updated>2013-07-03T23:41:00-04:00</updated>
    <id>http://www.hankbeaver.com/blog/2013/07/03/what-ops-folk-need-to-learn-to-become-devops</id>
    <content type="html"><![CDATA[<p>This is simply a list. It relates to web applications. And it's for me to think about and you to judge.  I ended up with
15 and I did cut a few. They are loosely in order as far as the technical
is concerned.</p>

<p>There are many skills Ops pros already have that compliment this list,
like DNS, Unix, etc. I'm not going to go over every possible skill a
good web ops person likely knows.</p>

<ol>
<li><p>Learn how to program, Ruby is a great start (you’ll need it for
Chef/Puppet anyway, more on that later).</p></li>
<li><p>Embrace source control. Put all your scripts and tools in source
control.  <a href="http://git-scm.com/">http://git-scm.com/</a></p></li>
<li><p>You should be using public cloud services. <a href="http://aws.amazon.com/s3/">Amazon Web Services
S3</a> is a great start.
Host a static website or put your cat gifs there.</p></li>
<li><p>You need to know how to program against an API. Write some files to
S3 with Ruby and Fog: <a href="http://fog.io/storage/">http://fog.io/storage/</a> <!-- more --></p></li>
<li><p>Understand HTTP: Headers (there are a lot), Methods, cookies,
sessions, Example:
 <code>
 ‘Cache-Control’
</code></p></li>
<li><p>Document everything as you go, you should be making your knowledge
easily shared and understandable. Better yet, add READMEs to your code.</p></li>
<li><p>Be open to pairing and regularly sharing your domain knowledge.</p></li>
<li><p>Your team should have a standup everyday, even if a distributed
team, meet on Skype/Hangout and say: what you did yesterday, what you
are doing today, any blockers.</p></li>
<li><p>Learn SQL (language).</p></li>
<li><p>Learn a NoSQL database: <a href="http://www.mongodb.org/">mongoDB</a>, <a href="http://redis.io/">Redis</a>, <a href="http://memcached.org/">memcached</a></p></li>
<li><p>Use and work with a CDN and/or asset service like <a href="http://aws.amazon.com/cloudfront/">AWS Cloudfront</a></p></li>
<li><p>Learn <a href="http://wiki.nginx.org/Main">nginx</a> and how to use it as a reverse proxy with caching to an app.</p></li>
<li><p>Unless it’s core to business, embrace idea of using 3rd party
services for infrastructure: DevOps is about getting applications to
market quicker and more stably, not about running your own
infrastructure. Email and DNS are good examples.</p></li>
<li><p>Reach across aisle to Development, better yet try to pair with a Dev
on some code or a project. It’s not about them being better than you or
vice versa, learn from each other’s strengths and complement one
another.</p></li>
<li><p>Now learn <a href="http://www.opscode.com/chef/">Chef</a> (or <a href="https://puppetlabs.com/">Puppet</a> if that's your bag) and configure a
virtual server somewhere from base distro with Wordpress site
running ready to go with SSH logins and everything.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
